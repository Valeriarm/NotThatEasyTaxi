{"ast":null,"code":"var Writable = require('stream').Writable;\n\nvar inherits = require('inherits');\n\nfunction Endpoint(options, callback) {\n  if (!(this instanceof Endpoint)) return new Endpoint(options, callback); // `options` defaults to {}\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  Writable.call(this, options);\n  var self = this;\n  this._objectMode = !!options.objectMode; // will keep a long list of buffers\n\n  this._buffers = []; // Cleanup event listeners\n\n  var sources = [];\n\n  function cleanup() {\n    self.removeListener('pipe', onpipe);\n    self.removeListener('error', error);\n    self.removeListener('finish', finish);\n\n    for (var i = 0, l = sources.length; i < l; i++) {\n      sources[i].removeListener('error', error);\n    }\n  } // Either finish or error will be used to declare a done state\n\n\n  function finish() {\n    cleanup();\n    callback(null, self.buffer);\n  }\n\n  function error(err) {\n    cleanup();\n    callback(err, self.buffer);\n  } // Handle errors on source streams\n\n\n  function onpipe(source) {\n    sources.push(source);\n    source.once('error', error);\n  }\n\n  function onunpipe(source) {\n    var index = sources.indexOf(source);\n\n    if (index !== -1) {\n      sources.splice(index, 1);\n      source.removeListener('error', error);\n    }\n  }\n\n  this.once('finish', finish);\n  this.once('error', error);\n  this.on('pipe', onpipe);\n  this.on('unpipe', onunpipe);\n}\n\nmodule.exports = Endpoint;\ninherits(Endpoint, Writable);\n\nEndpoint.prototype._write = function (data, encodeing, callback) {\n  this._buffers.push(data);\n\n  return callback(null);\n};\n\nObject.defineProperty(Endpoint.prototype, \"buffer\", {\n  get: function get() {\n    if (this._objectMode) {\n      return this._buffers;\n    } else {\n      var total = Buffer.concat(this._buffers);\n      this._buffers = [total];\n      return total;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});","map":null,"metadata":{},"sourceType":"script"}
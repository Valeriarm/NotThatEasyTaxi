{"ast":null,"code":"import _classCallCheck from \"/home/linux/Escritorio/prueba/proyecto1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/linux/Escritorio/prueba/proyecto1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/linux/Escritorio/prueba/proyecto1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/linux/Escritorio/prueba/proyecto1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/linux/Escritorio/prueba/proyecto1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/linux/Escritorio/prueba/proyecto1/src/componentes/MiMapa.js\";\nimport React, { PureComponent } from 'react';\nimport Leaflet from 'leaflet';\nimport { Map, Marker, Popup, TileLayer, GeoJSON } from 'leaflet';\nimport { markers, mapConfig } from '';\nimport './ReactLeafletMap.styl';\nLeaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.0/images/'; // Data for GeoJSON usage\n\nvar data = {\n  type: \"FeatureCollection\",\n  features: [{\n    type: \"Feature\",\n    id: \"01\",\n    properties: {\n      name: \"Alabama\",\n      density: 94.65\n    },\n    geometry: {\n      type: \"Polygon\"\n    }\n  }]\n};\n\nvar ReactLeafletMap =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ReactLeafletMap, _PureComponent);\n\n  function ReactLeafletMap() {\n    _classCallCheck(this, ReactLeafletMap);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReactLeafletMap).apply(this, arguments));\n  }\n\n  _createClass(ReactLeafletMap, [{\n    key: \"getStyle\",\n    // Get the style for your polygons from GeoJSON, it can be dependable on a parameter you want.\n    // For example, you can use different style for different density of the location\n    value: function getStyle(feature) {\n      return {\n        weight: 2,\n        opacity: 1,\n        color: 'blue',\n        dashArray: '3',\n        fillOpacity: 0.7\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // create an array with marker components\n      var LeafletMarkers = markers.map(function (marker) {\n        return React.createElement(Marker, {\n          position: marker.latlng,\n          key: \"marker_\".concat(marker.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(Popup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, marker.name)));\n      });\n      return React.createElement(\"div\", {\n        className: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Map, {\n        center: mapConfig.center,\n        zoom: mapConfig.zoom,\n        className: \"map__reactleaflet\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(TileLayer, {\n        url: \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"http://www.openstreetmap.org/copyright\\\">OpenStreetMap</a>, \\xA9 <a href=\\\"https://carto.com/attribution\\\">CARTO</a>\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), LeafletMarkers, React.createElement(GeoJSON, {\n        data: data,\n        style: this.getStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ReactLeafletMap;\n}(PureComponent);\n\nexport default ReactLeafletMap;","map":{"version":3,"sources":["/home/linux/Escritorio/prueba/proyecto1/src/componentes/MiMapa.js"],"names":["React","PureComponent","Leaflet","Map","Marker","Popup","TileLayer","GeoJSON","markers","mapConfig","Icon","Default","imagePath","data","type","features","id","properties","name","density","geometry","ReactLeafletMap","feature","weight","opacity","color","dashArray","fillOpacity","LeafletMarkers","map","marker","latlng","center","zoom","getStyle"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,OAAxC,QAAuD,SAAvD;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,EAAnC;AAEA,OAAO,wBAAP;AAEAP,OAAO,CAACQ,IAAR,CAAaC,OAAb,CAAqBC,SAArB,GAAiC,wDAAjC,C,CAGA;;AACA,IAAMC,IAAI,GAAG;AACXC,EAAAA,IAAI,EAAE,mBADK;AAEXC,EAAAA,QAAQ,EAAE,CACR;AACED,IAAAA,IAAI,EAAE,SADR;AAEEE,IAAAA,EAAE,EAAE,IAFN;AAGEC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,OAAO,EAAE;AAA5B,KAHd;AAIEC,IAAAA,QAAQ,EAAE;AACRN,MAAAA,IAAI,EAAE;AADE;AAJZ,GADQ;AAFC,CAAb;;IAaMO,e;;;;;;;;;;;;;AAGN;AACA;6BACWC,O,EAAS;AAChB,aAAO;AACHC,QAAAA,MAAM,EAAE,CADL;AAEHC,QAAAA,OAAO,EAAE,CAFN;AAGHC,QAAAA,KAAK,EAAE,MAHJ;AAIHC,QAAAA,SAAS,EAAE,GAJR;AAKHC,QAAAA,WAAW,EAAE;AALV,OAAP;AAOD;;;6BAEQ;AACP;AACA,UAAMC,cAAc,GAAGpB,OAAO,CAACqB,GAAR,CAAY,UAAAC,MAAM;AAAA,eACvC,oBAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEA,MAAM,CAACC,MAAzB;AAAiC,UAAA,GAAG,mBAAYD,MAAM,CAACZ,IAAnB,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOY,MAAM,CAACZ,IAAd,CADF,CADF,CADuC;AAAA,OAAlB,CAAvB;AAQA,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAET,SAAS,CAACuB,MAAvB;AAA+B,QAAA,IAAI,EAAEvB,SAAS,CAACwB,IAA/C;AAAqD,QAAA,SAAS,EAAC,mBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,GAAG,EAAC,8EADN;AAEE,QAAA,WAAW,EAAC,qIAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKGL,cALH,EAOE,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAEf,IAAf;AAAqB,QAAA,KAAK,EAAE,KAAKqB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,CADF,CADF;AAaD;;;;EAtC2BjC,a;;AAyC9B,eAAeoB,eAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport Leaflet from 'leaflet';\nimport { Map, Marker, Popup, TileLayer, GeoJSON } from 'leaflet';\nimport { markers, mapConfig } from ''\n\nimport './ReactLeafletMap.styl';\n\nLeaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.0/images/';\n\n\n// Data for GeoJSON usage\nconst data = {\n  type: \"FeatureCollection\",\n  features: [\n    {\n      type: \"Feature\",\n      id: \"01\",\n      properties: { name: \"Alabama\", density: 94.65 },\n      geometry: {\n        type: \"Polygon\"}\n    }\n  ]\n}\n\nclass ReactLeafletMap extends PureComponent {\n\n\n// Get the style for your polygons from GeoJSON, it can be dependable on a parameter you want.\n// For example, you can use different style for different density of the location\n  getStyle(feature) {\n    return {\n        weight: 2,\n        opacity: 1,\n        color: 'blue',\n        dashArray: '3',\n        fillOpacity: 0.7\n    }\n  }\n\n  render() {\n    // create an array with marker components\n    const LeafletMarkers = markers.map(marker => (\n      <Marker position={marker.latlng} key={`marker_${marker.name}`}>\n        <Popup>\n          <span>{marker.name}</span>\n        </Popup>\n      </Marker>\n    ));\n\n    return (\n      <div className=\"map\">\n        <Map center={mapConfig.center} zoom={mapConfig.zoom} className=\"map__reactleaflet\">\n          <TileLayer\n            url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>'\n          />\n          {LeafletMarkers}\n          {/* You can now try to find Alabama on a Map to see how it looks like now with GeoJSON*/}\n          <GeoJSON data={data} style={this.getStyle} />\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default ReactLeafletMap;"]},"metadata":{},"sourceType":"module"}